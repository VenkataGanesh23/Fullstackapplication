generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int   @id @default(autoincrement())
  first_name     String
  last_name      String
  email          String   @unique
  password       String
  dob            String
  resetToken     String?  
  resetTokenExpiry DateTime?
  createdAt      DateTime @default(now())
  isActive Boolean @default(true)


  products       Product[]
  carts          Cart[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  gender      String
  subCategory String
  brand       String
  sizes       String[]
  colors      String[]
  images      String[]
  stock       Int
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[] 
  createdAt   DateTime  @default(now())
}

model Cart {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  isActive     Boolean    @default(true)         // Indicates current active shopping cart
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  cartItems    CartItem[]

  @@index([userId])
}

model CartItem {
  id          Int       @id @default(autoincrement())
  cart        Cart      @relation(fields: [cartId], references: [id])
  cartId      Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int       @default(1)
  size        String?   // Optional: product size, e.g., shoe size
  color       String?   // Optional: product color variant
  addedAt     DateTime  @default(now())

  @@unique([cartId, productId, size, color])  // Prevent duplicate cart items with same product + variant
  @@index([cartId])
}

model Content {
  id          Int      @id @default(autoincrement())
  title       String
  images      String[]
  descriptions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}